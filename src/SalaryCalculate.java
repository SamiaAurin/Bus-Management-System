
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author User
 */
public class SalaryCalculate extends javax.swing.JFrame {

    /**
     * Creates new form SalaryCalculate
     */
    public Connection connection;
    String currentuser;

    public SalaryCalculate(String currentuser) {
        initComponents();
        this.currentuser = currentuser;
        try {
            //con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=ProjectDB;selectMethod=cursor", "sa", "swarnali");
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=ProjectDB;selectMethod=cursor", "sa", "123456");
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public Connection con;
    PreparedStatement pst;
    int salary = 0, bonusper = 0;
    String driverIDString = "";
    String dateStart = "";
    String dateEnd = "";
    String bonusperString = "";

    public SalaryCalculate() {
        initComponents();

        try {
            //con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=ProjectDB;selectMethod=cursor", "sa", "swarnali");
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=ProjectDB;selectMethod=cursor", "sa", "123456");
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelDate2 = new javax.swing.JLabel();
        jButtonCalculateSalary = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabelShowTotalSalary = new javax.swing.JLabel();
        jButtonClear = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldDriverID = new javax.swing.JTextField();
        jLabelYear = new javax.swing.JLabel();
        jTextFieldYear = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableshow = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldBonusPercentage = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabelBonusShow = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabelBasicSalaryShow = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabelDate2.setText("Month");

        jButtonCalculateSalary.setText("CalculateSalary");
        jButtonCalculateSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalculateSalaryActionPerformed(evt);
            }
        });

        jLabel2.setText("          Total Salary");

        jButtonClear.setText("Clear");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jLabel3.setText("Driver ID");

        jLabelYear.setText("Year");

        jTextFieldYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldYearActionPerformed(evt);
            }
        });

        jTableshow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TripID", "Date", "TkPerTrip"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableshow.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTableshow);

        jLabel1.setText("Bonus Percentage");

        jLabel4.setText("       Bonus");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sep", "Oct", "Nov", "Dec" }));

        jLabel5.setText("Basic Salary");

        jButton1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelBonusShow, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(178, 178, 178)
                                .addComponent(jLabelBasicSalaryShow, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelShowTotalSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelYear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelDate2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(72, 72, 72)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextFieldYear, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextFieldBonusPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(72, 72, 72)
                                        .addComponent(jTextFieldDriverID, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(129, 129, 129)
                                .addComponent(jButtonCalculateSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 923, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCalculateSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldDriverID, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelYear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldYear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelDate2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldBonusPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelBonusShow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jLabelShowTotalSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabelBasicSalaryShow, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCalculateSalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalculateSalaryActionPerformed
        // TODO add your handling code here:

        driverIDString = jTextFieldDriverID.getText();

        /*if(jComboBox1.getSelectedItem().toString().equals("Jan") ||jComboBox1.getSelectedItem().toString().equals("Mar") ||
           jComboBox1.getSelectedItem().toString().equals("May") || jComboBox1.getSelectedItem().toString().equals("July") ||
                jComboBox1.getSelectedItem().toString().equals("Aug")||jComboBox1.getSelectedItem().toString().equals("Oct")||
                jComboBox1.getSelectedItem().toString().equals("Dec"))*/
        ///////////////////
        if (!(jTextFieldYear.getText()).equals("") && jComboBox1.getSelectedItem().toString().equals("Feb")) {
            int year = Integer.parseInt(jTextFieldYear.getText());

            boolean leap = false;

            if (year % 4 == 0) {

                if (year % 100 == 0) {

                    if (year % 400 == 0) {
                        leap = true;
                    } else {
                        leap = false;
                    }
                } else {
                    leap = true;
                }
            } else {
                leap = false;
            }

            if (leap) {
                dateStart = (jTextFieldYear.getText()) + "-" + "02-01";
                dateEnd = (jTextFieldYear.getText()) + "-" + "02-29";
            } else {
                dateStart = (jTextFieldYear.getText()) + "-" + "02-01";
                dateEnd = (jTextFieldYear.getText()) + "-" + "02-28";
            }

        } else if (!(jTextFieldYear.getText()).equals("")) {
            switch (jComboBox1.getSelectedItem().toString()) {
                case "Jan":
                    dateStart = (jTextFieldYear.getText()) + "-" + "01-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "01-31";
                    break;

                case "Mar":
                    dateStart = (jTextFieldYear.getText()) + "-" + "03-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "03-31";
                    break;
                case "May":
                    dateStart = (jTextFieldYear.getText()) + "-" + "05-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "05-31";
                    break;
                case "July":
                    dateStart = (jTextFieldYear.getText()) + "-" + "07-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "07-31";
                    break;
                case "Aug":
                    dateStart = (jTextFieldYear.getText()) + "-" + "08-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "08-31";
                    break;
                case "Oct":
                    dateStart = (jTextFieldYear.getText()) + "-" + "10-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "10-31";
                    break;
                case "Dec":
                    dateStart = (jTextFieldYear.getText()) + "-" + "12-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "12-31";
                    break;

                /////////////////////
                case "Apr":
                    dateStart = (jTextFieldYear.getText()) + "-" + "04-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "04-30";
                    break;
                case "June":
                    dateStart = (jTextFieldYear.getText()) + "-" + "06-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "06-30";
                    break;
                case "Sep":
                    dateStart = (jTextFieldYear.getText()) + "-" + "09-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "09-30";
                    break;
                case "Nov":
                    dateStart = (jTextFieldYear.getText()) + "-" + "11-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "11-30";
                    break;

            }
        }

        //////////////////
        /*
        //if( !(jTextFieldYear.getText()).equals(""))
        {
            switch(jComboBox1.getSelectedItem().toString())
            {
                case "Jan":    dateStart=(jTextFieldYear.getText())+"-"+"01-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"01-31";
                               break;
                               
                case "Mar":    dateStart=(jTextFieldYear.getText())+"-"+"03-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"03-31";
                               break;
                case "May":    dateStart=(jTextFieldYear.getText())+"-"+"05-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"05-31";
                               break;
                case "July":    dateStart=(jTextFieldYear.getText())+"-"+"07-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"07-31";
                               break;
                case "Aug":    dateStart=(jTextFieldYear.getText())+"-"+"08-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"08-31";
                               break;
                 case "Oct":    dateStart=(jTextFieldYear.getText())+"-"+"10-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"10-31";
                               break;
                case "Dec":    dateStart=(jTextFieldYear.getText())+"-"+"12-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"12-31";
                               break;
                               
                   
                               /////////////////////
                               
                case "Feb":    dateStart=(jTextFieldYear.getText())+"-"+"02-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"02-28";
                               break;
                               
                case "Apr":    dateStart=(jTextFieldYear.getText())+"-"+"04-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"04-30";
                               break;
                case "June":    dateStart=(jTextFieldYear.getText())+"-"+"06-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"06-30";
                               break;
                case "Sep":    dateStart=(jTextFieldYear.getText())+"-"+"09-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"09-30";
                               break;
                case "Nov":    dateStart=(jTextFieldYear.getText())+"-"+"11-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"11-30";
                               break;
                         
                               
                
            }
            
        }*/
        if (!driverIDString.equals("") && !dateStart.equals("") && !dateEnd.equals("")) {
            int driverID = Integer.parseInt(jTextFieldDriverID.getText());

            try {
                pst = con.prepareStatement("select DriverID from Trip where DriverID=?");
                pst.setInt(1, driverID);
                //pst.setString(2, dateStart);
                //pst.setString(3, dateEnd);
                ResultSet rs = pst.executeQuery();

                if (rs.next() == false) {
                    jButtonCalculateSalary.setEnabled(false);
                    jTextFieldDriverID.setEnabled(false);
                    jTextFieldYear.setEnabled(false);
                    jComboBox1.setEnabled(false);
                    jTextFieldBonusPercentage.setEnabled(false);
                    JOptionPane.showMessageDialog(this, "No trip found for this driver");
                } else {

                    ///////////////////////////
                    pst = con.prepareStatement("select DriverID,DateStart,DateEnd from Salary where DriverID=? and DateStart=? and DateEnd=?");
                    pst.setInt(1, driverID);
                    pst.setString(2, dateStart);
                    pst.setString(3, dateEnd);
                    rs = pst.executeQuery();

                    if (rs.next() == true) {
                        JOptionPane.showMessageDialog(this, "Salary Already Calculated");
                    } else {
                        jButtonCalculateSalary.setEnabled(false);
                        jTextFieldDriverID.setEnabled(false);
                        jTextFieldYear.setEnabled(false);
                        jTextFieldBonusPercentage.setEnabled(false);
                        jComboBox1.setEnabled(false);

                        ShowInfo(driverID, dateStart, dateEnd);

                        if ((jTextFieldBonusPercentage.getText()).equals("")) {
                            bonusper = 0;
                        } else {
                            bonusper = Integer.parseInt(jTextFieldBonusPercentage.getText());
                        }

                        double totalBonus = (bonusper * salary) / 100.00;
                        jLabelBasicSalaryShow.setText(Double.toString(salary) + " Taka");
                        jLabelShowTotalSalary.setText(Double.toString(salary + totalBonus) + " Taka");
                        jLabelBonusShow.setText(Double.toString(totalBonus) + " Taka");

                        datainput(driverID, dateStart, dateEnd, salary, totalBonus);

                        salary = 0;
                        totalBonus = 0;
                        dateStart = "";
                        dateEnd = "";
                        driverIDString = "";
                    }

                    //////////////////////////// 
                    /*
                            jButtonCalculateSalary.setEnabled(false);
                            jTextFieldDriverID.setEnabled(false);
                            jTextFieldYear.setEnabled(false);
                            jTextFieldBonusPercentage.setEnabled(false);
                            jComboBox1.setEnabled(false);
                            
                            
                            ShowInfo(driverID,dateStart,dateEnd);
                            
                            
                            if((jTextFieldBonusPercentage.getText()).equals(""))
                            {
                                bonusper=0;
                            }
                            else
                            {
                                bonusper=  Integer.parseInt(jTextFieldBonusPercentage.getText());
                            }
                            

                            double totalBonus=(bonusper*salary)/100.00;
                            jLabelBasicSalaryShow.setText(Double.toString(salary)+" Taka");
                            jLabelShowTotalSalary.setText(Double.toString(salary+totalBonus)+" Taka");
                            jLabelBonusShow.setText(Double.toString(totalBonus)+" Taka");
                            
                            
                            datainput(driverID,dateStart,dateEnd,salary,totalBonus);
                            
                            
                            
                            salary=0;
                            totalBonus=0;
                            dateStart="";
                            dateEnd="";
                            driverIDString="";*/
                }

            } catch (SQLException ex) {
                Logger.getLogger(SalaryCalculate.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "FieldEmpty");
        }

        //jLabelShowTotalSalary.setText(Integer.toString(salary)+" Taka");

    }//GEN-LAST:event_jButtonCalculateSalaryActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        // TODO add your handling code here:

        jTableshow.setModel(new DefaultTableModel(null, new String[]{"TripID", "Date", "SalaryPerTrip"}));
        jTextFieldDriverID.setText("");
        jTextFieldYear.setText("");
        //jComboBox1.setText("");
        jLabelShowTotalSalary.setText("");
        jTextFieldBonusPercentage.setText("");
        jLabelBonusShow.setText("");
        jLabelBasicSalaryShow.setText("");

        jTextFieldDriverID.setEnabled(true);
        jTextFieldBonusPercentage.setEnabled(true);
        jTextFieldYear.setEnabled(true);
        jComboBox1.setEnabled(true);
        jButtonCalculateSalary.setEnabled(true);
        //jButtonBonus.setEnabled(true);  

    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jTextFieldYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldYearActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Badsalary mainpg = new Badsalary(currentuser);
        mainpg.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    public void ShowInfo(int driverID, String dateStart, String dateEnd) {

        try {
            pst = con.prepareStatement("select DriverID,Date,SalaryPerTrip,TripID from Trip where DriverID=? AND (Date BETWEEN ? AND ?) ");
            pst.setInt(1, driverID);
            pst.setString(2, dateStart);
            pst.setString(3, dateEnd);

            ResultSet rs = pst.executeQuery();

            ResultSetMetaData rsm = rs.getMetaData();

            int x = rsm.getColumnCount();

            DefaultTableModel DF = (DefaultTableModel) jTableshow.getModel();
            DF.setRowCount(0);

            {
                while (rs.next()) {
                    Vector v = new Vector();

                    for (int i = 0; i <= x; i++) {
                        v.add(rs.getString("TripID"));
                        v.add(rs.getString("Date"));
                        v.add(rs.getString("SalaryPerTrip"));

                    }
                    salary += rs.getInt("SalaryPerTrip");

                    DF.addRow(v);

                }

                //JOptionPane.showMessageDialog(this, salary);  
            }

        } catch (SQLException ex) {
            Logger.getLogger(SalaryCalculate.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //salary table input
    public void datainput(int driverID, String dateStart, String dateEnd, int salary, double totalBonus) {

        try {
            pst = con.prepareStatement("insert into Salary(DriverID,DateStart, DateEnd,BasicSalary,Bonus,TotalSalary)values(?,?,?,?,?,?)");

            pst.setInt(1, driverID);
            pst.setString(2, dateStart);
            pst.setString(3, dateEnd);
            pst.setInt(4, salary);
            pst.setDouble(5, totalBonus);
            pst.setDouble(6, salary + totalBonus);
            int x = pst.executeUpdate();

        } catch (SQLException ex) {
            Logger.getLogger(SalaryCalculate.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalaryCalculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalaryCalculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalaryCalculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalaryCalculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SalaryCalculate().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonCalculateSalary;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelBasicSalaryShow;
    private javax.swing.JLabel jLabelBonusShow;
    private javax.swing.JLabel jLabelDate2;
    private javax.swing.JLabel jLabelShowTotalSalary;
    private javax.swing.JLabel jLabelYear;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableshow;
    private javax.swing.JTextField jTextFieldBonusPercentage;
    private javax.swing.JTextField jTextFieldDriverID;
    private javax.swing.JTextField jTextFieldYear;
    // End of variables declaration//GEN-END:variables
}
