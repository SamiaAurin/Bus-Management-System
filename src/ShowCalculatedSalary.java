
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author User
 */
public class ShowCalculatedSalary extends javax.swing.JFrame {

    /**
     * Creates new form ShowCalculatedSalary
     */
    public Connection con;
    PreparedStatement pst;
    String driveridstring = "";

    public Connection connection;
    String currentuser;

    public ShowCalculatedSalary(String currentuser) {
        initComponents();
        this.currentuser = currentuser;
        try {
            //con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=ProjectDB;selectMethod=cursor", "sa", "swarnali");
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=ProjectDB;selectMethod=cursor", "sa", "123456");
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public ShowCalculatedSalary() {
        initComponents();
        try {
           Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=ProjectDB;selectMethod=cursor", "sa", "123456");
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldSearchID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableShow = new javax.swing.JTable();
        jButtonSearch = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("       Driver ID");

        jTableShow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Starting Date", "Ending Date", "Basic Salary", "Bonus", "Total Salary"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableShow.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableShow);

        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jButtonClear.setText("Clear");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jTextFieldSearchID, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 172, Short.MAX_VALUE)
                .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldSearchID, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearch)
                    .addComponent(jButtonClear))
                .addGap(50, 50, 50)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(103, 103, 103)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        // TODO add your handling code here:

        //int driverID=  Integer.parseInt(jTextFieldSearchID.getText());
        driveridstring = jTextFieldSearchID.getText();

        //////////////////
        if (!driveridstring.equals("")) {
            int driverID = Integer.parseInt(jTextFieldSearchID.getText());
            try {
                pst = con.prepareStatement("select DriverID from Salary where DriverID=?");
                pst.setInt(1, driverID);
                ResultSet rs = pst.executeQuery();

                if (rs.next() == false) {
                    jButtonSearch.setEnabled(false);
                    jTextFieldSearchID.setEnabled(false);
                    JOptionPane.showMessageDialog(this, "Salary not calculated for this driver ID");
                } else {
                    jButtonSearch.setEnabled(false);
                    jTextFieldSearchID.setEnabled(false);
                    //JOptionPane.showMessageDialog(this,"calculate");
                    ShowInfo(driverID);
                }

            } catch (SQLException ex) {
                Logger.getLogger(SalaryCalculate.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Field Empty");
        }
        /////////////////////////

        /*
        try {
            pst= con.prepareStatement("select DriverID from Salary where DriverID=?");
            pst.setInt(1, driverID);
            ResultSet rs=pst.executeQuery();
            
            if(rs.next()==false)
            {
                jButtonSearch.setEnabled(false);
                jTextFieldSearchID.setEnabled(false);
               JOptionPane.showMessageDialog(this,"Salary not calculated for this driver ID");
            }
            else
            {
                jButtonSearch.setEnabled(false);
                jTextFieldSearchID.setEnabled(false);
                //JOptionPane.showMessageDialog(this,"calculate");
                ShowInfo(driverID);
            }
            
            
        } catch (SQLException ex) {
            Logger.getLogger(SalaryCalculate.class.getName()).log(Level.SEVERE, null, ex);
        }*/

    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        // TODO add your handling code here:

        driveridstring = "";

        jTableShow.setModel(new DefaultTableModel(null, new String[]{"DateStart", "DateEnd", "BasicSalary", "Bonus", "TotalSalary"}));
        jTextFieldSearchID.setText("");

        jButtonSearch.setEnabled(true);
        jTextFieldSearchID.setEnabled(true);


    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Badsalary mainpg = new Badsalary(currentuser);
        mainpg.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowCalculatedSalary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowCalculatedSalary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowCalculatedSalary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowCalculatedSalary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShowCalculatedSalary().setVisible(true);
            }
        });
    }

    public void ShowInfo(int driverID) {

        try {
            pst = con.prepareStatement("select DateStart, DateEnd,BasicSalary,Bonus,TotalSalary from Salary where DriverID=?");
            pst.setInt(1, driverID);

            ResultSet rs = pst.executeQuery();

            ResultSetMetaData rsm = rs.getMetaData();

            int x = rsm.getColumnCount();

            DefaultTableModel DF = (DefaultTableModel) jTableShow.getModel();
            DF.setRowCount(0);

            {
                while (rs.next()) {
                    Vector v = new Vector();

                    for (int i = 0; i <= x; i++) {
                        //JOptionPane.showMessageDialog(this,"calculate");
                        v.add(rs.getString("DateStart"));
                        v.add(rs.getString("DateEnd"));
                        v.add(rs.getString("BasicSalary"));
                        v.add(rs.getString("Bonus"));
                        v.add(rs.getString("TotalSalary"));

                    }

                    DF.addRow(v);

                }

                //JOptionPane.showMessageDialog(this, salary);  
            }

        } catch (SQLException ex) {
            Logger.getLogger(ShowCalculatedSalary.class.getName()).log(Level.SEVERE, null, ex);
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableShow;
    private javax.swing.JTextField jTextFieldSearchID;
    // End of variables declaration//GEN-END:variables
}
