
import static java.lang.Integer.parseInt;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author User
 */
public class DriverSalaryWithdraw extends javax.swing.JFrame {

    /**
     * Creates new form DriverSalaryWithdraw
     */
    public Connection con;
    PreparedStatement pst;
    int driverID = 0;
    String dateStart = "";
    String dateEnd = "";
    float saving = 0;
    boolean check = true;
    public Connection connection;
    String currentuser;

    public DriverSalaryWithdraw(String currentuser) {
        initComponents();
        this.currentuser = currentuser;
        try {
            //con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=ProjectDB;selectMethod=cursor", "sa", "swarnali");
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=ProjectDB;selectMethod=cursor", "sa", "123456");
            driverID = Integer.parseInt(this.currentuser);
            showInfo();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public DriverSalaryWithdraw() {
        initComponents();

        try {
            //con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=ProjectDB;selectMethod=cursor", "sa", "swarnali");
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=ProjectDB;selectMethod=cursor", "sa", "123456");
            driverID = Integer.parseInt(this.currentuser);
            showInfo();
        } catch (Exception e) {
            e.printStackTrace();
        }

        //int driverID=Integer.parseInt(jTextFieldtemp.getText());
        //showInfo(driverID);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableShow = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonWithdrawSalary = new javax.swing.JButton();
        jTextFieldYear = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButtonWithdrawSavings = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabelTotalSavingsShow = new javax.swing.JLabel();
        jButtonClear = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableShow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DateStart", "DateEnd", "BasicSalary", "Bonus", "TotalSalary", "Saving", "SavingStatus"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableShow.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableShow);

        jLabel1.setText("Year");

        jLabel2.setText("Month");

        jButtonWithdrawSalary.setText("Withdraw Salary");
        jButtonWithdrawSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonWithdrawSalaryActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sep", "Oct", "Nov", "Dec" }));

        jButtonWithdrawSavings.setText("Withdraw Savings");
        jButtonWithdrawSavings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonWithdrawSavingsActionPerformed(evt);
            }
        });

        jLabel3.setText("Total Savings");

        jButtonClear.setText("Clear");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonWithdrawSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldYear, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jButtonWithdrawSavings, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(311, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTotalSavingsShow, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(148, 148, 148)
                                .addComponent(jButtonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(49, 49, 49))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonClear)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabelTotalSavingsShow, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonWithdrawSalary)
                    .addComponent(jButtonWithdrawSavings))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(108, 108, 108)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonWithdrawSalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonWithdrawSalaryActionPerformed
        // TODO add your handling code here:

        if (!(jTextFieldYear.getText()).equals("") && jComboBox1.getSelectedItem().toString().equals("Feb")) {
            int year = Integer.parseInt(jTextFieldYear.getText());

            boolean leap = false;

            if (year % 4 == 0) {

                if (year % 100 == 0) {

                    if (year % 400 == 0) {
                        leap = true;
                    } else {
                        leap = false;
                    }
                } else {
                    leap = true;
                }
            } else {
                leap = false;
            }

            if (leap) {
                dateStart = (jTextFieldYear.getText()) + "-" + "02-01";
                dateEnd = (jTextFieldYear.getText()) + "-" + "02-29";
            } else {
                dateStart = (jTextFieldYear.getText()) + "-" + "02-01";
                dateEnd = (jTextFieldYear.getText()) + "-" + "02-28";
            }

        } else if (!(jTextFieldYear.getText()).equals("")) {
            switch (jComboBox1.getSelectedItem().toString()) {
                case "Jan":
                    dateStart = (jTextFieldYear.getText()) + "-" + "01-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "01-31";
                    break;

                case "Mar":
                    dateStart = (jTextFieldYear.getText()) + "-" + "03-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "03-31";
                    break;
                case "May":
                    dateStart = (jTextFieldYear.getText()) + "-" + "05-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "05-31";
                    break;
                case "July":
                    dateStart = (jTextFieldYear.getText()) + "-" + "07-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "07-31";
                    break;
                case "Aug":
                    dateStart = (jTextFieldYear.getText()) + "-" + "08-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "08-31";
                    break;
                case "Oct":
                    dateStart = (jTextFieldYear.getText()) + "-" + "10-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "10-31";
                    break;
                case "Dec":
                    dateStart = (jTextFieldYear.getText()) + "-" + "12-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "12-31";
                    break;

                /////////////////////
                case "Apr":
                    dateStart = (jTextFieldYear.getText()) + "-" + "04-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "04-30";
                    break;
                case "June":
                    dateStart = (jTextFieldYear.getText()) + "-" + "06-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "06-30";
                    break;
                case "Sep":
                    dateStart = (jTextFieldYear.getText()) + "-" + "09-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "09-30";
                    break;
                case "Nov":
                    dateStart = (jTextFieldYear.getText()) + "-" + "11-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "11-30";
                    break;

            }
        }

        /*if( !(jTextFieldYear.getText()).equals(""))
        {
            switch(jComboBox1.getSelectedItem().toString())
            {
                case "Jan":    dateStart=(jTextFieldYear.getText())+"-"+"01-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"01-31";
                               break;
                               
                case "Mar":    dateStart=(jTextFieldYear.getText())+"-"+"03-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"03-31";
                               break;
                case "May":    dateStart=(jTextFieldYear.getText())+"-"+"05-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"05-31";
                               break;
                case "July":    dateStart=(jTextFieldYear.getText())+"-"+"07-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"07-31";
                               break;
                case "Aug":    dateStart=(jTextFieldYear.getText())+"-"+"08-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"08-31";
                               break;
                 case "Oct":    dateStart=(jTextFieldYear.getText())+"-"+"10-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"10-31";
                               break;
                case "Dec":    dateStart=(jTextFieldYear.getText())+"-"+"12-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"12-31";
                               break;
                               
                   
                               /////////////////////
                               
                case "Feb":    dateStart=(jTextFieldYear.getText())+"-"+"02-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"02-28";
                               break;
                               
                case "Apr":    dateStart=(jTextFieldYear.getText())+"-"+"04-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"04-30";
                               break;
                case "June":    dateStart=(jTextFieldYear.getText())+"-"+"06-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"06-30";
                               break;
                case "Sep":    dateStart=(jTextFieldYear.getText())+"-"+"09-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"09-30";
                               break;
                case "Nov":    dateStart=(jTextFieldYear.getText())+"-"+"11-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"11-30";
                               break;
                         
                  
            }
            
        }*/
        if (!dateStart.equals("") && !dateEnd.equals("")) {
            jTextFieldYear.setEnabled(false);
            jComboBox1.setEnabled(false);
            jButtonWithdrawSalary.setEnabled(false);

            try {
                pst = con.prepareStatement("select DateStart,DateEnd,TotalSalary from Salary where DateStart=? and DateEnd=? and DriverID=?");
                pst.setString(1, dateStart);
                pst.setString(2, dateEnd);
                pst.setInt(3, driverID);

                ResultSet rs = pst.executeQuery();

                if (rs.next() == false) {

                    JOptionPane.showMessageDialog(this, "Date does not exist");
                } else {
                    JFrame frame = new JFrame();
                    String message = "Do you rearry want to withdraw slary?";
                    int answer = JOptionPane.showConfirmDialog(frame, message);
                    if (answer == JOptionPane.YES_OPTION) {

                        pst = con.prepareStatement("select SavingStatus,TotalSalary from Salary where DateStart=? and DateEnd=? and DriverID=?");
                        pst.setString(1, dateStart);
                        pst.setString(2, dateEnd);
                        pst.setInt(3, driverID);

                        rs = pst.executeQuery();

                        float totalSalary = 0;
                        while (rs.next()) {
                            totalSalary = Float.parseFloat(rs.getString("TotalSalary"));
                        }

                        JOptionPane.showMessageDialog(this, "Total Salary Withdrawn " + totalSalary + " taka");
                        totalSalary = 0;

                        pst = con.prepareStatement("update Salary set TotalSalary=? where DateStart=? and DateEnd=? and DriverID=?");
                        pst.setFloat(1, 0);
                        pst.setString(2, dateStart);
                        pst.setString(3, dateEnd);
                        pst.setInt(4, driverID);

                        int x = pst.executeUpdate();

                        showInfo();

                    } else if (answer == JOptionPane.NO_OPTION) {
                        // User clicked NO.
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(DriverSalaryWithdraw.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Field Empty");
        }


    }//GEN-LAST:event_jButtonWithdrawSalaryActionPerformed

    private void jButtonWithdrawSavingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonWithdrawSavingsActionPerformed
        // TODO add your handling code here:

        JFrame frame = new JFrame();
        String message = "Do you rearry want to withdraw slary?";
        int answer = JOptionPane.showConfirmDialog(frame, message);
        if (answer == JOptionPane.YES_OPTION) {
            JOptionPane.showMessageDialog(this, "Total Savings Withdrawn " + saving + " taka");
            saving = 0;

            try {
                pst = con.prepareStatement("update Salary set Saving=? where DriverID=?");
                pst.setFloat(1, 0);
                pst.setInt(2, driverID);

                int x = pst.executeUpdate();

                showInfo();

            } catch (SQLException ex) {
                Logger.getLogger(DriverSalaryWithdraw.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        check = true;
        jLabelTotalSavingsShow.setText(saving + " taka");
    }//GEN-LAST:event_jButtonWithdrawSavingsActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        // TODO add your handling code here:

        jTableShow.setModel(new DefaultTableModel(null, new String[]{"DateStart", "DateEnd", "BasicSalary", "Bonus", "TotalSalary", "Saving", "SavingStatus"}));

        jTextFieldYear.setText("");
        jLabelTotalSavingsShow.setText("");

        jTextFieldYear.setEnabled(true);
        jComboBox1.setEnabled(true);
        jButtonWithdrawSalary.setEnabled(true);


    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Bdrvwelcome mainpg = new Bdrvwelcome(currentuser);
        mainpg.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public void showInfo() {

        try {
            pst = con.prepareStatement("select DateStart, DateEnd,BasicSalary,Bonus,TotalSalary,Saving,SavingStatus from Salary where DriverID=?");
            pst.setInt(1, driverID);

            ResultSet rs = pst.executeQuery();

            ResultSetMetaData rsm = rs.getMetaData();

            int x = rsm.getColumnCount();

            DefaultTableModel DF = (DefaultTableModel) jTableShow.getModel();
            DF.setRowCount(0);

            {
                while (rs.next()) {
                    Vector v = new Vector();

                    for (int i = 0; i <= x; i++) {
                        //JOptionPane.showMessageDialog(this,"calculate");
                        v.add(rs.getString("DateStart"));
                        v.add(rs.getString("DateEnd"));
                        v.add(rs.getString("BasicSalary"));
                        v.add(rs.getString("Bonus"));
                        v.add(rs.getString("TotalSalary"));
                        v.add(rs.getString("Saving"));
                        v.add(rs.getString("SavingStatus"));

                    }
                    if (check) {
                        saving += rs.getInt("Saving");
                    }

                    DF.addRow(v);

                }

                //JOptionPane.showMessageDialog(this, salary);  
            }

            check = false;
            jLabelTotalSavingsShow.setText(saving + " taka");

        } catch (SQLException ex) {
            Logger.getLogger(ShowCalculatedSalary.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DriverSalaryWithdraw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DriverSalaryWithdraw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DriverSalaryWithdraw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DriverSalaryWithdraw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DriverSalaryWithdraw().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonWithdrawSalary;
    private javax.swing.JButton jButtonWithdrawSavings;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelTotalSavingsShow;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableShow;
    private javax.swing.JTextField jTextFieldYear;
    // End of variables declaration//GEN-END:variables
}
