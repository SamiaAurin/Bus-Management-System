
import static java.lang.Integer.parseInt;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author User
 */
public class DriverSalaryShow extends javax.swing.JFrame {

    /**
     * Creates new form DriverSalaryShow
     */
    public Connection con;
    PreparedStatement pst;
    String amountString = "";
    String dateStart = "";
    String dateEnd = "";
    int driverID = 0;
    public Connection connection;
    String currentuser;

    public DriverSalaryShow(String currentuser) {
        initComponents();
        this.currentuser = currentuser;
        try {
            //con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=ProjectDB;selectMethod=cursor", "sa", "swarnali");
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=ProjectDB;selectMethod=cursor", "sa", "123456");
            driverID = parseInt(this.currentuser);
            showInfo();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public DriverSalaryShow() {
        initComponents();

        try {
            //con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=ProjectDB;selectMethod=cursor", "sa", "swarnali");
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=ProjectDB;selectMethod=cursor", "sa", "123456");
        } catch (Exception e) {
            e.printStackTrace();
        }

        //int driverID=Integer.parseInt(jTextFieldtemp.getText());
        //showInfo(driverID);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableShow = new javax.swing.JTable();
        jButtonSaveMoney = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldAmount = new javax.swing.JTextField();
        jTextFieldtemp = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldYear = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButtonTemp = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jTableShow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Starting Date", "Ending Date", "Basic Salary", "Bonus", "Total Salary", "Saving", "SavingStatus"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableShow.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableShow);

        jButtonSaveMoney.setText("Save Money");
        jButtonSaveMoney.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveMoneyActionPerformed(evt);
            }
        });

        jLabel1.setText("Amount");

        jLabel2.setText("Month");

        jLabel3.setText("Year");

        jTextFieldYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldYearActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sep", "Oct", "Nov", "Dec" }));

        jButtonTemp.setText("Temp");
        jButtonTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTempActionPerformed(evt);
            }
        });

        jButtonClear.setText("Clear");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 968, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(92, 92, 92)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldYear, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(237, 237, 237))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextFieldtemp, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                            .addComponent(jTextFieldAmount))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonSaveMoney, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(237, 237, 237))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(209, 209, 209)
                                .addComponent(jButtonTemp)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldtemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTemp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTextFieldAmount)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSaveMoney, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldYear)
                    .addComponent(jButtonClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                .addGap(81, 81, 81)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addGap(31, 31, 31))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldYearActionPerformed

    private void jButtonSaveMoneyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveMoneyActionPerformed
        // TODO add your handling code here:

        amountString = jTextFieldAmount.getText();//////////////

        if (!(jTextFieldYear.getText()).equals("") && jComboBox1.getSelectedItem().toString().equals("Feb")) {
            int year = Integer.parseInt(jTextFieldYear.getText());

            boolean leap = false;

            if (year % 4 == 0) {

                if (year % 100 == 0) {

                    if (year % 400 == 0) {
                        leap = true;
                    } else {
                        leap = false;
                    }
                } else {
                    leap = true;
                }
            } else {
                leap = false;
            }

            if (leap) {
                dateStart = (jTextFieldYear.getText()) + "-" + "02-01";
                dateEnd = (jTextFieldYear.getText()) + "-" + "02-29";
            } else {
                dateStart = (jTextFieldYear.getText()) + "-" + "02-01";
                dateEnd = (jTextFieldYear.getText()) + "-" + "02-28";
            }

        } else if (!(jTextFieldYear.getText()).equals("")) {
            switch (jComboBox1.getSelectedItem().toString()) {
                case "Jan":
                    dateStart = (jTextFieldYear.getText()) + "-" + "01-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "01-31";
                    break;

                case "Mar":
                    dateStart = (jTextFieldYear.getText()) + "-" + "03-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "03-31";
                    break;
                case "May":
                    dateStart = (jTextFieldYear.getText()) + "-" + "05-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "05-31";
                    break;
                case "July":
                    dateStart = (jTextFieldYear.getText()) + "-" + "07-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "07-31";
                    break;
                case "Aug":
                    dateStart = (jTextFieldYear.getText()) + "-" + "08-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "08-31";
                    break;
                case "Oct":
                    dateStart = (jTextFieldYear.getText()) + "-" + "10-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "10-31";
                    break;
                case "Dec":
                    dateStart = (jTextFieldYear.getText()) + "-" + "12-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "12-31";
                    break;

                /////////////////////
                case "Apr":
                    dateStart = (jTextFieldYear.getText()) + "-" + "04-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "04-30";
                    break;
                case "June":
                    dateStart = (jTextFieldYear.getText()) + "-" + "06-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "06-30";
                    break;
                case "Sep":
                    dateStart = (jTextFieldYear.getText()) + "-" + "09-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "09-30";
                    break;
                case "Nov":
                    dateStart = (jTextFieldYear.getText()) + "-" + "11-01";
                    dateEnd = (jTextFieldYear.getText()) + "-" + "11-30";
                    break;

            }
        }

        /*
        if( !(jTextFieldYear.getText()).equals(""))
        {
            switch(jComboBox1.getSelectedItem().toString())
            {
                case "Jan":    dateStart=(jTextFieldYear.getText())+"-"+"01-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"01-31";
                               break;
                               
                case "Mar":    dateStart=(jTextFieldYear.getText())+"-"+"03-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"03-31";
                               break;
                case "May":    dateStart=(jTextFieldYear.getText())+"-"+"05-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"05-31";
                               break;
                case "July":    dateStart=(jTextFieldYear.getText())+"-"+"07-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"07-31";
                               break;
                case "Aug":    dateStart=(jTextFieldYear.getText())+"-"+"08-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"08-31";
                               break;
                 case "Oct":    dateStart=(jTextFieldYear.getText())+"-"+"10-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"10-31";
                               break;
                case "Dec":    dateStart=(jTextFieldYear.getText())+"-"+"12-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"12-31";
                               break;
                               
                   
                               /////////////////////
                               
                case "Feb":    dateStart=(jTextFieldYear.getText())+"-"+"02-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"02-28";
                               break;
                               
                case "Apr":    dateStart=(jTextFieldYear.getText())+"-"+"04-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"04-30";
                               break;
                case "June":    dateStart=(jTextFieldYear.getText())+"-"+"06-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"06-30";
                               break;
                case "Sep":    dateStart=(jTextFieldYear.getText())+"-"+"09-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"09-30";
                               break;
                case "Nov":    dateStart=(jTextFieldYear.getText())+"-"+"11-01";
                               dateEnd=(jTextFieldYear.getText())+"-"+"11-30";
                               break;
                         
                  
            }
            
        }*/
        if (!dateStart.equals("") && !dateEnd.equals("") && !amountString.equals("")) {

            jTextFieldYear.setEnabled(false);
            jTextFieldAmount.setEnabled(false);
            jComboBox1.setEnabled(false);
            jButtonSaveMoney.setEnabled(false);

            try {

                pst = con.prepareStatement("select DateStart,DateEnd,SavingStatus from Salary where DateStart=? and DateEnd=? and DriverID=?");
                pst.setString(1, dateStart);
                pst.setString(2, dateEnd);
                pst.setInt(3, driverID);

                ResultSet rs = pst.executeQuery();

                if (rs.next() == false) {

                    JOptionPane.showMessageDialog(this, "Date does not exist");
                } else {
                    pst = con.prepareStatement("select SavingStatus,TotalSalary from Salary where DateStart=? and DateEnd=? and DriverID=?");
                    pst.setString(1, dateStart);
                    pst.setString(2, dateEnd);
                    pst.setInt(3, driverID);

                    rs = pst.executeQuery();

                    String savingStatus = "";
                    float totalSalary = 0;
                    while (rs.next()) {
                        savingStatus = rs.getString("SavingStatus");
                        totalSalary = Float.parseFloat(rs.getString("TotalSalary"));

                    }

                    if (savingStatus.equals("NotDone")) {
                        //JOptionPane.showMessageDialog(this,"CanSave");
                        float amount = Float.parseFloat(jTextFieldAmount.getText());
                        if (Float.parseFloat(jTextFieldAmount.getText()) > totalSalary) {
                            JOptionPane.showMessageDialog(this, "Amount you tring to save is more than your total salary");
                        } else {
                            pst = con.prepareStatement("update Salary set TotalSalary=?,Saving=?,SavingStatus=? where DateStart=? and DateEnd=? and DriverID=?");
                            pst.setFloat(1, totalSalary - amount);
                            pst.setFloat(2, amount);
                            pst.setString(3, "Done");
                            pst.setString(4, dateStart);
                            pst.setString(5, dateEnd);
                            pst.setInt(6, driverID);

                            int x = pst.executeUpdate();

                            showInfo();

                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "Already saved for this month");
                    }
                }

                /*else if(savingStatus.equals("NotDone"))
                        {
                            
                            //JOptionPane.showMessageDialog(this,"Can save");
                            pst= con.prepareStatement("select DateStart,DateEnd,Saving from Salary where DateStart=? and DateEnd=?");
                            pst.setString(1, dateStart);
                            pst.setString(2, dateEnd);
                            
                            rs=pst.executeQuery();
                            
                            float saving=0;
                            while (rs.next()) {
                                  saving = Float.parseFloat(rs.getString("SavingStatus"));

                                }
                            //JOptionPane.showMessageDialog(this,saving);
                                                        
                            if(Float.parseFloat(jTextFieldAmount.getText())>saving)
                            {
                                JOptionPane.showMessageDialog(this,"Amount you tring to save is more than your total salary");
                            }
                        }
                        else
                        {
                            
                        }*/
            } catch (SQLException ex) {
                Logger.getLogger(DriverSalaryShow.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "FieldEmpty");
        }


    }//GEN-LAST:event_jButtonSaveMoneyActionPerformed

    private void jButtonTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTempActionPerformed
        // TODO add your handling code here:

        driverID = Integer.parseInt(jTextFieldtemp.getText());

        showInfo();


    }//GEN-LAST:event_jButtonTempActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        // TODO add your handling code here:

        jTableShow.setModel(new DefaultTableModel(null, new String[]{"DateStart", "DateEnd", "BasicSalary", "Bonus", "TotalSalary", "Saving", "SavingStatus"}));

        jTextFieldYear.setText("");
        jTextFieldAmount.setText("");

        jTextFieldYear.setEnabled(true);
        jComboBox1.setEnabled(true);
        jButtonSaveMoney.setEnabled(true);
        jTextFieldAmount.setEnabled(true);


    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Bdrvwelcome mainpg = new Bdrvwelcome(currentuser);
        mainpg.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    ///////////////
    public void showInfo() {

        try {
            pst = con.prepareStatement("select DateStart, DateEnd,BasicSalary,Bonus,TotalSalary,Saving,SavingStatus from Salary where DriverID=?");
            pst.setInt(1, driverID);

            ResultSet rs = pst.executeQuery();

            ResultSetMetaData rsm = rs.getMetaData();

            int x = rsm.getColumnCount();

            DefaultTableModel DF = (DefaultTableModel) jTableShow.getModel();
            DF.setRowCount(0);

            {
                while (rs.next()) {
                    Vector v = new Vector();

                    for (int i = 0; i <= x; i++) {
                        //JOptionPane.showMessageDialog(this,"calculate");
                        v.add(rs.getString("DateStart"));
                        v.add(rs.getString("DateEnd"));
                        v.add(rs.getString("BasicSalary"));
                        v.add(rs.getString("Bonus"));
                        v.add(rs.getString("TotalSalary"));
                        v.add(rs.getString("Saving"));
                        v.add(rs.getString("SavingStatus"));

                    }

                    DF.addRow(v);

                }

                //JOptionPane.showMessageDialog(this, salary);  
            }

        } catch (SQLException ex) {
            Logger.getLogger(ShowCalculatedSalary.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DriverSalaryShow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DriverSalaryShow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DriverSalaryShow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DriverSalaryShow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DriverSalaryShow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonSaveMoney;
    private javax.swing.JButton jButtonTemp;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableShow;
    private javax.swing.JTextField jTextFieldAmount;
    private javax.swing.JTextField jTextFieldYear;
    private javax.swing.JTextField jTextFieldtemp;
    // End of variables declaration//GEN-END:variables
}
